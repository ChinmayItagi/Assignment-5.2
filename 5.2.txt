Assignment5.2

Sales  of  different  TV  Task  2:
Write  a  MapReduce  program  to  calculate  the  total  units  sold  for 
each Company.
Sales  of  different  TV  Task  3:
Write  a  MapReduce  program  to  calculate  the  total  units  sold  in
each state for Onida company.

//Class Task52




import org.apache.hadoop.fs.Path; 
import org.apache.hadoop.conf.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat; 
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat; 
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat; 
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;

public class Task52 {
	@SuppressWarnings("deprecation")
	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = new Job(conf, "DemoTask1");
		job.setJarByClass(Task52.class);

		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(IntWritable.class);

		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		job.setMapperClass(Task52Mapper.class);
		job.setReducerClass(reducer52.class);
		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);

		FileInputFormat.addInputPath(job, new Path(args[0])); 
		FileOutputFormat.setOutputPath(job,new Path(args[1]));
		
		/*
		Path out=new Path(args[1]);
		out.getFileSystem(conf).delete(out);
		*/
		
		job.waitForCompletion(true);// wait for the job to end
		
		
		Job job1 = new Job(conf, "DemoTask2");
		job1.setJarByClass(Task52.class);

		job1.setMapOutputKeyClass(Text.class);
		job1.setMapOutputValueClass(IntWritable.class);

		job1.setOutputKeyClass(Text.class);
		job1.setOutputValueClass(IntWritable.class);
		job1.setMapperClass(mapper52b.class);
		job1.setReducerClass(reducer52.class);
		job1.setInputFormatClass(TextInputFormat.class);
		job1.setOutputFormatClass(TextOutputFormat.class);

		FileInputFormat.addInputPath(job1, new Path(args[0])); 
		FileOutputFormat.setOutputPath(job1,new Path(args[2]));
		
		/*
		Path out=new Path(args[1]);
		out.getFileSystem(conf).delete(out);
		*/
		
		job1.waitForCompletion(true);// wait for the job to end
		
	}
}




//class Task52mapper




import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.TestJobCounters.NewSummer;
import org.apache.hadoop.mapreduce.*; 

public class Task52Mapper extends Mapper<LongWritable, Text, Text, IntWritable> {
	IntWritable no1 = new IntWritable(1);
	public void map(LongWritable key, Text value, Context context) 
			throws IOException, InterruptedException {
		String[] lineArray = value.toString().split("\\|");
		String s = lineArray[0];//stroing the splitted values in strings
		String s1 = lineArray[1];
		if(!(s.equals("NA") || s1.equals("NA")))//NA condition implemented
		{
		context.write(new Text(s), no1);
		}
	}
}



//mapper52b


import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.*; 

public class mapper52b extends Mapper<LongWritable, Text, Text, IntWritable> {
	IntWritable no = new IntWritable(1);
	public void map(LongWritable key, Text value, Context context) 
			throws IOException, InterruptedException {
		String[] lineArray = value.toString().split("\\|");
		String s = lineArray[0];//stroing the splitted values in strings
		String s1 = lineArray[1];
		String s2 = lineArray[3];
		if(!(s.equals("NA")|| s1.equals("NA")))
		if(s.equals("Onida"))//NA condition implemented
		{
		context.write(new Text(s2), no);
		}
	}
}


//class reduce52


import java.io.IOException;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapreduce.Reducer;
public class reducer52 extends Reducer<Text,IntWritable,Text, IntWritable> {
	public void reduce(Text key, Iterable<IntWritable> value , Context con) throws IOException, InterruptedException
	{
		int sum =0;
		for(IntWritable v : value)
		{
			sum = sum + v.get();
		}
		con.write(key, new IntWritable(sum));
	}

}


